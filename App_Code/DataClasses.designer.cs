#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dbKnow")]
public partial class DBMap : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Inserttrn_Table(trn_Table instance);
  partial void Updatetrn_Table(trn_Table instance);
  partial void Deletetrn_Table(trn_Table instance);
  partial void Inserttrn_Database(trn_Database instance);
  partial void Updatetrn_Database(trn_Database instance);
  partial void Deletetrn_Database(trn_Database instance);
  partial void Inserttrn_Field(trn_Field instance);
  partial void Updatetrn_Field(trn_Field instance);
  partial void Deletetrn_Field(trn_Field instance);
  #endregion
	
	public DBMap() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DBMap(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBMap(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBMap(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBMap(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<trn_Table> trn_Tables
	{
		get
		{
			return this.GetTable<trn_Table>();
		}
	}
	
	public System.Data.Linq.Table<trn_Database> trn_Databases
	{
		get
		{
			return this.GetTable<trn_Database>();
		}
	}
	
	public System.Data.Linq.Table<trn_Field> trn_Fields
	{
		get
		{
			return this.GetTable<trn_Field>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.trn_Tables")]
public partial class trn_Table : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TableID;
	
	private int _DatabaseID;
	
	private string _Name;
	
	private string _Description;
	
	private int _Active;
	
	private System.DateTime _LastScanned;
	
	private System.DateTime _LastModified;
	
	private System.DateTime _Created;
	
	private int _LockNum;
	
	private EntitySet<trn_Field> _trn_Fields;
	
	private EntityRef<trn_Database> _trn_Database;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableIDChanging(int value);
    partial void OnTableIDChanged();
    partial void OnDatabaseIDChanging(int value);
    partial void OnDatabaseIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(int value);
    partial void OnActiveChanged();
    partial void OnLastScannedChanging(System.DateTime value);
    partial void OnLastScannedChanged();
    partial void OnLastModifiedChanging(System.DateTime value);
    partial void OnLastModifiedChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLockNumChanging(int value);
    partial void OnLockNumChanged();
    #endregion
	
	public trn_Table()
	{
		this._trn_Fields = new EntitySet<trn_Field>(new Action<trn_Field>(this.attach_trn_Fields), new Action<trn_Field>(this.detach_trn_Fields));
		this._trn_Database = default(EntityRef<trn_Database>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int TableID
	{
		get
		{
			return this._TableID;
		}
		set
		{
			if ((this._TableID != value))
			{
				this.OnTableIDChanging(value);
				this.SendPropertyChanging();
				this._TableID = value;
				this.SendPropertyChanged("TableID");
				this.OnTableIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseID", DbType="Int NOT NULL")]
	public int DatabaseID
	{
		get
		{
			return this._DatabaseID;
		}
		set
		{
			if ((this._DatabaseID != value))
			{
				if (this._trn_Database.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDatabaseIDChanging(value);
				this.SendPropertyChanging();
				this._DatabaseID = value;
				this.SendPropertyChanged("DatabaseID");
				this.OnDatabaseIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Int NOT NULL")]
	public int Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastScanned", DbType="DateTime NOT NULL")]
	public System.DateTime LastScanned
	{
		get
		{
			return this._LastScanned;
		}
		set
		{
			if ((this._LastScanned != value))
			{
				this.OnLastScannedChanging(value);
				this.SendPropertyChanging();
				this._LastScanned = value;
				this.SendPropertyChanged("LastScanned");
				this.OnLastScannedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL")]
	public System.DateTime LastModified
	{
		get
		{
			return this._LastModified;
		}
		set
		{
			if ((this._LastModified != value))
			{
				this.OnLastModifiedChanging(value);
				this.SendPropertyChanging();
				this._LastModified = value;
				this.SendPropertyChanged("LastModified");
				this.OnLastModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockNum", DbType="Int NOT NULL")]
	public int LockNum
	{
		get
		{
			return this._LockNum;
		}
		set
		{
			if ((this._LockNum != value))
			{
				this.OnLockNumChanging(value);
				this.SendPropertyChanging();
				this._LockNum = value;
				this.SendPropertyChanged("LockNum");
				this.OnLockNumChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="trn_Table_trn_Field", Storage="_trn_Fields", ThisKey="TableID", OtherKey="TableID")]
	public EntitySet<trn_Field> trn_Fields
	{
		get
		{
			return this._trn_Fields;
		}
		set
		{
			this._trn_Fields.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="trn_Database_trn_Table", Storage="_trn_Database", ThisKey="DatabaseID", OtherKey="DatabaseID", IsForeignKey=true)]
	public trn_Database trn_Database
	{
		get
		{
			return this._trn_Database.Entity;
		}
		set
		{
			trn_Database previousValue = this._trn_Database.Entity;
			if (((previousValue != value) 
						|| (this._trn_Database.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._trn_Database.Entity = null;
					previousValue.trn_Tables.Remove(this);
				}
				this._trn_Database.Entity = value;
				if ((value != null))
				{
					value.trn_Tables.Add(this);
					this._DatabaseID = value.DatabaseID;
				}
				else
				{
					this._DatabaseID = default(int);
				}
				this.SendPropertyChanged("trn_Database");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_trn_Fields(trn_Field entity)
	{
		this.SendPropertyChanging();
		entity.trn_Table = this;
	}
	
	private void detach_trn_Fields(trn_Field entity)
	{
		this.SendPropertyChanging();
		entity.trn_Table = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.trn_Databases")]
public partial class trn_Database : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DatabaseID;
	
	private string _Name;
	
	private string _Description;
	
	private int _DatabaseTypeInd;
	
	private string _ConnectionString;
	
	private int _Active;
	
	private System.DateTime _LastScanned;
	
	private System.DateTime _LastModified;
	
	private System.DateTime _Created;
	
	private int _LockNum;
	
	private EntitySet<trn_Table> _trn_Tables;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDatabaseIDChanging(int value);
    partial void OnDatabaseIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDatabaseTypeIndChanging(int value);
    partial void OnDatabaseTypeIndChanged();
    partial void OnConnectionStringChanging(string value);
    partial void OnConnectionStringChanged();
    partial void OnActiveChanging(int value);
    partial void OnActiveChanged();
    partial void OnLastScannedChanging(System.DateTime value);
    partial void OnLastScannedChanged();
    partial void OnLastModifiedChanging(System.DateTime value);
    partial void OnLastModifiedChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLockNumChanging(int value);
    partial void OnLockNumChanged();
    #endregion
	
	public trn_Database()
	{
		this._trn_Tables = new EntitySet<trn_Table>(new Action<trn_Table>(this.attach_trn_Tables), new Action<trn_Table>(this.detach_trn_Tables));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DatabaseID
	{
		get
		{
			return this._DatabaseID;
		}
		set
		{
			if ((this._DatabaseID != value))
			{
				this.OnDatabaseIDChanging(value);
				this.SendPropertyChanging();
				this._DatabaseID = value;
				this.SendPropertyChanged("DatabaseID");
				this.OnDatabaseIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseTypeInd", DbType="Int NOT NULL")]
	public int DatabaseTypeInd
	{
		get
		{
			return this._DatabaseTypeInd;
		}
		set
		{
			if ((this._DatabaseTypeInd != value))
			{
				this.OnDatabaseTypeIndChanging(value);
				this.SendPropertyChanging();
				this._DatabaseTypeInd = value;
				this.SendPropertyChanged("DatabaseTypeInd");
				this.OnDatabaseTypeIndChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConnectionString", DbType="NChar(255)")]
	public string ConnectionString
	{
		get
		{
			return this._ConnectionString;
		}
		set
		{
			if ((this._ConnectionString != value))
			{
				this.OnConnectionStringChanging(value);
				this.SendPropertyChanging();
				this._ConnectionString = value;
				this.SendPropertyChanged("ConnectionString");
				this.OnConnectionStringChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Int NOT NULL")]
	public int Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastScanned", DbType="DateTime NOT NULL")]
	public System.DateTime LastScanned
	{
		get
		{
			return this._LastScanned;
		}
		set
		{
			if ((this._LastScanned != value))
			{
				this.OnLastScannedChanging(value);
				this.SendPropertyChanging();
				this._LastScanned = value;
				this.SendPropertyChanged("LastScanned");
				this.OnLastScannedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL")]
	public System.DateTime LastModified
	{
		get
		{
			return this._LastModified;
		}
		set
		{
			if ((this._LastModified != value))
			{
				this.OnLastModifiedChanging(value);
				this.SendPropertyChanging();
				this._LastModified = value;
				this.SendPropertyChanged("LastModified");
				this.OnLastModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockNum", DbType="Int NOT NULL")]
	public int LockNum
	{
		get
		{
			return this._LockNum;
		}
		set
		{
			if ((this._LockNum != value))
			{
				this.OnLockNumChanging(value);
				this.SendPropertyChanging();
				this._LockNum = value;
				this.SendPropertyChanged("LockNum");
				this.OnLockNumChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="trn_Database_trn_Table", Storage="_trn_Tables", ThisKey="DatabaseID", OtherKey="DatabaseID")]
	public EntitySet<trn_Table> trn_Tables
	{
		get
		{
			return this._trn_Tables;
		}
		set
		{
			this._trn_Tables.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_trn_Tables(trn_Table entity)
	{
		this.SendPropertyChanging();
		entity.trn_Database = this;
	}
	
	private void detach_trn_Tables(trn_Table entity)
	{
		this.SendPropertyChanging();
		entity.trn_Database = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.trn_Fields")]
public partial class trn_Field : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FieldID;
	
	private int _TableID;
	
	private string _Name;
	
	private string _Description;
	
	private int _Sequence;
	
	private int _Nullable;
	
	private string _FieldType;
	
	private int _MaxLength;
	
	private int _Active;
	
	private System.DateTime _LastScanned;
	
	private System.DateTime _LastModified;
	
	private System.DateTime _Created;
	
	private int _LockNum;
	
	private EntityRef<trn_Table> _trn_Table;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldIDChanging(int value);
    partial void OnFieldIDChanged();
    partial void OnTableIDChanging(int value);
    partial void OnTableIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSequenceChanging(int value);
    partial void OnSequenceChanged();
    partial void OnNullableChanging(int value);
    partial void OnNullableChanged();
    partial void OnFieldTypeChanging(string value);
    partial void OnFieldTypeChanged();
    partial void OnMaxLengthChanging(int value);
    partial void OnMaxLengthChanged();
    partial void OnActiveChanging(int value);
    partial void OnActiveChanged();
    partial void OnLastScannedChanging(System.DateTime value);
    partial void OnLastScannedChanged();
    partial void OnLastModifiedChanging(System.DateTime value);
    partial void OnLastModifiedChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLockNumChanging(int value);
    partial void OnLockNumChanged();
    #endregion
	
	public trn_Field()
	{
		this._trn_Table = default(EntityRef<trn_Table>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FieldID
	{
		get
		{
			return this._FieldID;
		}
		set
		{
			if ((this._FieldID != value))
			{
				this.OnFieldIDChanging(value);
				this.SendPropertyChanging();
				this._FieldID = value;
				this.SendPropertyChanged("FieldID");
				this.OnFieldIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableID", DbType="Int NOT NULL")]
	public int TableID
	{
		get
		{
			return this._TableID;
		}
		set
		{
			if ((this._TableID != value))
			{
				if (this._trn_Table.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTableIDChanging(value);
				this.SendPropertyChanging();
				this._TableID = value;
				this.SendPropertyChanged("TableID");
				this.OnTableIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Int NOT NULL")]
	public int Sequence
	{
		get
		{
			return this._Sequence;
		}
		set
		{
			if ((this._Sequence != value))
			{
				this.OnSequenceChanging(value);
				this.SendPropertyChanging();
				this._Sequence = value;
				this.SendPropertyChanged("Sequence");
				this.OnSequenceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nullable", DbType="Int NOT NULL")]
	public int Nullable
	{
		get
		{
			return this._Nullable;
		}
		set
		{
			if ((this._Nullable != value))
			{
				this.OnNullableChanging(value);
				this.SendPropertyChanging();
				this._Nullable = value;
				this.SendPropertyChanged("Nullable");
				this.OnNullableChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldType", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string FieldType
	{
		get
		{
			return this._FieldType;
		}
		set
		{
			if ((this._FieldType != value))
			{
				this.OnFieldTypeChanging(value);
				this.SendPropertyChanging();
				this._FieldType = value;
				this.SendPropertyChanged("FieldType");
				this.OnFieldTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxLength", DbType="Int NOT NULL")]
	public int MaxLength
	{
		get
		{
			return this._MaxLength;
		}
		set
		{
			if ((this._MaxLength != value))
			{
				this.OnMaxLengthChanging(value);
				this.SendPropertyChanging();
				this._MaxLength = value;
				this.SendPropertyChanged("MaxLength");
				this.OnMaxLengthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Int NOT NULL")]
	public int Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastScanned", DbType="DateTime NOT NULL")]
	public System.DateTime LastScanned
	{
		get
		{
			return this._LastScanned;
		}
		set
		{
			if ((this._LastScanned != value))
			{
				this.OnLastScannedChanging(value);
				this.SendPropertyChanging();
				this._LastScanned = value;
				this.SendPropertyChanged("LastScanned");
				this.OnLastScannedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL")]
	public System.DateTime LastModified
	{
		get
		{
			return this._LastModified;
		}
		set
		{
			if ((this._LastModified != value))
			{
				this.OnLastModifiedChanging(value);
				this.SendPropertyChanging();
				this._LastModified = value;
				this.SendPropertyChanged("LastModified");
				this.OnLastModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockNum", DbType="Int NOT NULL")]
	public int LockNum
	{
		get
		{
			return this._LockNum;
		}
		set
		{
			if ((this._LockNum != value))
			{
				this.OnLockNumChanging(value);
				this.SendPropertyChanging();
				this._LockNum = value;
				this.SendPropertyChanged("LockNum");
				this.OnLockNumChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="trn_Table_trn_Field", Storage="_trn_Table", ThisKey="TableID", OtherKey="TableID", IsForeignKey=true)]
	public trn_Table trn_Table
	{
		get
		{
			return this._trn_Table.Entity;
		}
		set
		{
			trn_Table previousValue = this._trn_Table.Entity;
			if (((previousValue != value) 
						|| (this._trn_Table.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._trn_Table.Entity = null;
					previousValue.trn_Fields.Remove(this);
				}
				this._trn_Table.Entity = value;
				if ((value != null))
				{
					value.trn_Fields.Add(this);
					this._TableID = value.TableID;
				}
				else
				{
					this._TableID = default(int);
				}
				this.SendPropertyChanged("trn_Table");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
